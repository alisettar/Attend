@using Microsoft.Extensions.Localization
@inject IStringLocalizer<SharedResource> Localizer
@{
    ViewData["Title"] = Localizer["ScannerPage"];
    var events = ViewBag.Events as List<EventViewModel> ?? new List<EventViewModel>();
    var selectedEventId = ViewBag.SelectedEventId as Guid?;
}

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <!-- Header -->
            <!--<div class="text-center mb-4">
                <h2><i class="bi bi-qr-code-scan me-2"></i>@Localizer["ScannerPage"]</h2>
                <p class="text-muted">@Localizer["ScanQROrEnterManually"]</p>
            </div>-->

            <!-- Event Selection -->
            <div class="card mb-4">
                <div class="card-body">
                    <label class="form-label fw-bold">
                        <i class="bi bi-calendar-event me-2"></i>@Localizer["SelectEvent"]
                    </label>
                    @if (events.Any())
                    {
                        <select id="eventSelect" class="form-select form-select-lg">
                            <option value="">-- @Localizer["SelectEvent"] --</option>
                            @foreach (var evt in events)
                            {
                                <option value="@evt.Id" selected="@(selectedEventId == evt.Id)">
                                    @evt.Title - @evt.Date.ToString("dd MMM yyyy")
                                </option>
                            }
                        </select>
                    }
                    else
                    {
                        <div class="alert alert-warning mb-0">
                            <i class="bi bi-exclamation-triangle me-2"></i>@Localizer["NoActiveEvents"]
                        </div>
                    }
                </div>
            </div>

            <!-- Scan Mode Toggle -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="btn-group w-100" role="group">
                        <input type="radio" class="btn-check" name="scanMode" id="usbMode" checked>
                        <label class="btn btn-outline-primary" for="usbMode">
                            <i class="bi bi-upc-scan me-1"></i>@Localizer["USBScanner"]
                        </label>
                        <input type="radio" class="btn-check" name="scanMode" id="cameraMode">
                        <label class="btn btn-outline-primary" for="cameraMode">
                            <i class="bi bi-camera me-1"></i>@Localizer["CameraScanner"]
                        </label>
                        <input type="radio" class="btn-check" name="scanMode" id="manualMode">
                        <label class="btn btn-outline-primary" for="manualMode">
                            <i class="bi bi-pencil-square me-1"></i>Manuel Kayıt
                        </label>
                    </div>
                </div>
            </div>

            <!-- USB Scanner Input -->
            <div class="card mb-4" id="usbSection">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-upc-scan me-2"></i>@Localizer["USBScanner"]
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <input type="text" 
                               id="qrInput" 
                               class="form-control form-control-lg text-center" 
                               placeholder="@Localizer["EnterQRCode"]"
                               autocomplete="off"
                               autofocus />
                    </div>
                    <div class="text-muted small">
                        <i class="bi bi-info-circle me-1"></i>
                        USB tarayıcınız otomatik olarak QR kodunu okuyacaktır
                    </div>
                </div>
            </div>

            <!-- Camera Scanner -->
            <div class="card mb-4 d-none" id="cameraSection">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-camera me-2"></i>@Localizer["CameraScanner"]
                    </h5>
                </div>
                <div class="card-body">
                    <div id="reader" style="width: 100%;"></div>
                    <div class="text-center mt-3">
                        <button id="startCamera" class="btn btn-success">
                            <i class="bi bi-camera-video me-1"></i>@Localizer["StartScanning"]
                        </button>
                        <button id="stopCamera" class="btn btn-danger d-none">
                            <i class="bi bi-camera-video-off me-1"></i>@Localizer["StopScanner"]
                        </button>
                    </div>
                    <div class="text-muted small mt-3">
                        <i class="bi bi-info-circle me-1"></i>
                        Tarayıcınız kamera erişimi isteyecektir. Lütfen izin verin.
                    </div>
                </div>
            </div>

            <!-- Manual Check-in -->
            <div class="card mb-4 d-none" id="manualSection">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-pencil-square me-2"></i>Manuel Katılımcı Kaydı
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Katılımcı Ara</label>
                        <input type="text" id="userSearchInput" class="form-control" placeholder="İsim yazarak ara..." />
                        <select id="userSelect" class="form-select form-select-lg mt-2" size="8">
                            <option value="">-- Yukarıda arama yapın --</option>
                        </select>
                    </div>
                    <button id="manualCheckInBtn" class="btn btn-primary btn-lg w-100">
                        <i class="bi bi-check-circle me-1"></i>Katılımcıyı Kaydet
                    </button>
                    <div class="text-muted small mt-3">
                        <i class="bi bi-info-circle me-1"></i>
                        QR tarayıcı çalışmıyorsa bu yöntemi kullanabilirsiniz
                    </div>
                </div>
            </div>

            <!-- Feedback Area -->
            <div id="feedbackArea"></div>
        </div>
    </div>
</div>

@section Scripts {
<script src="https://unpkg.com/html5-qrcode@2.3.8/html5-qrcode.min.js"></script>
<script>
    const qrInput = document.getElementById('qrInput');
    const eventSelect = document.getElementById('eventSelect');
    const feedbackArea = document.getElementById('feedbackArea');
    const usbSection = document.getElementById('usbSection');
    const cameraSection = document.getElementById('cameraSection');
    const manualSection = document.getElementById('manualSection');
    const usbMode = document.getElementById('usbMode');
    const cameraMode = document.getElementById('cameraMode');
    const manualMode = document.getElementById('manualMode');
    const startCamera = document.getElementById('startCamera');
    const stopCamera = document.getElementById('stopCamera');
    const userSearchInput = document.getElementById('userSearchInput');
    const userSelect = document.getElementById('userSelect');
    const manualCheckInBtn = document.getElementById('manualCheckInBtn');
    
    let isProcessing = false;
    let lastScanTime = 0;
    const SCAN_COOLDOWN = 2000; // 2 seconds cooldown between scans
    let html5QrcodeScanner = null;

    // Auto-focus on load
    qrInput.focus();

    // Load users for manual mode - with search
    let searchTimeout;
    userSearchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
            loadUsers(this.value);
        }, 300);
    });

    // Mode switching
    usbMode.addEventListener('change', function() {
        if (this.checked) {
            usbSection.classList.remove('d-none');
            cameraSection.classList.add('d-none');
            manualSection.classList.add('d-none');
            stopCameraScanner();
            setTimeout(() => qrInput.focus(), 100);
        }
    });

    cameraMode.addEventListener('change', function() {
        if (this.checked) {
            usbSection.classList.add('d-none');
            cameraSection.classList.remove('d-none');
            manualSection.classList.add('d-none');
        }
    });

    manualMode.addEventListener('change', function() {
        if (this.checked) {
            usbSection.classList.add('d-none');
            cameraSection.classList.add('d-none');
            manualSection.classList.remove('d-none');
            stopCameraScanner();
        }
    });

    // USB Scanner - Refocus logic
    qrInput.addEventListener('blur', function(e) {
        setTimeout(() => {
            const activeElement = document.activeElement;
            if (!isProcessing && usbMode.checked && activeElement !== eventSelect && !activeElement.closest('.alert')) {
                qrInput.focus();
            }
        }, 100);
    });

    eventSelect.addEventListener('change', function() {
        if (usbMode.checked) {
            setTimeout(() => qrInput.focus(), 100);
        }
    });

    // USB Scanner - Enter key handler
    qrInput.addEventListener('keypress', async function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            await processQRCode(qrInput.value.trim());
        }
    });

    // Camera Scanner
    startCamera.addEventListener('click', function() {
        startCameraScanner();
    });

    stopCamera.addEventListener('click', function() {
        stopCameraScanner();
    });

    // Manual Check-in
    manualCheckInBtn.addEventListener('click', async function() {
        const eventId = eventSelect.value;
        const userId = userSelect.value;

        if (!eventId) {
            showFeedback('error', '@Localizer["PleaseSelectEvent"]');
            return;
        }

        if (!userId) {
            showFeedback('error', 'Lütfen katılımcı seçin');
            return;
        }

        try {
            // Get user's QR code
            const userResponse = await fetch(`/Users/GetUserByIdJson?id=${userId}`);
            if (!userResponse.ok) {
                showFeedback('error', 'Katılımcı bilgisi alınamadı');
                return;
            }
            
            const user = await userResponse.json();
            
            // Use the same CheckIn endpoint as QR scanner
            const response = await fetch('/Scanner/CheckIn', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    qrCode: user.qrCode,
                    eventId: eventId
                })
            });

            if (response.ok) {
                const result = await response.json();
                let statusText = '';
                if (result.status === 'AlreadyCheckedIn') {
                    statusText = '@Localizer["AlreadyCheckedIn"]';
                } else if (result.isNewCheckIn) {
                    statusText = '@Localizer["NewRegistration"]';
                } else {
                    statusText = '@Localizer["Updated"]';
                }
                showFeedback('success', `✓ ${user.name} - ${statusText}`);
                userSelect.value = '';
            } else {
                const errorText = await response.text();
                const errorMessage = parseErrorMessage(errorText);
                showFeedback('error', errorMessage);
            }
        } catch (error) {
            showFeedback('error', 'Ağ hatası');
            console.error('Manual check-in error:', error);
        }
    });

    function startCameraScanner() {
        const eventId = eventSelect.value;
        if (!eventId) {
            showFeedback('error', '@Localizer["PleaseSelectEvent"]');
            return;
        }

        html5QrcodeScanner = new Html5Qrcode("reader");
        const config = { fps: 10, qrbox: { width: 250, height: 250 } };
        const cameraConfig = { facingMode: "environment" }; // Rear camera

        html5QrcodeScanner.start(
            cameraConfig,
            config,
            async (decodedText) => {
                if (!isProcessing) {
                    await processQRCode(decodedText);
                }
            },
            (errorMessage) => {
                // Ignore decode errors
            }
        ).then(() => {
            startCamera.classList.add('d-none');
            stopCamera.classList.remove('d-none');
        }).catch((err) => {
            showFeedback('error', `Kamera başlatılamadı: ${err}`);
        });
    }

    function stopCameraScanner() {
        if (html5QrcodeScanner) {
            html5QrcodeScanner.stop().then(() => {
                html5QrcodeScanner = null;
                startCamera.classList.remove('d-none');
                stopCamera.classList.add('d-none');
            }).catch((err) => {
                console.error('Stop error:', err);
            });
        }
    }

    async function loadUsers(searchTerm = '') {
        if (searchTerm.length < 2) {
            userSelect.innerHTML = '<option value="">-- En az 2 karakter girin --</option>';
            return;
        }
        
        try {
            const response = await fetch(`/Users/GetUsersJson?pageSize=50&search=${encodeURIComponent(searchTerm)}`);
            if (response.ok) {
                const data = await response.json();
                userSelect.innerHTML = '';
                if (data.items && data.items.length > 0) {
                    data.items.forEach(user => {
                        const option = document.createElement('option');
                        option.value = user.id;
                        option.textContent = user.name;
                        userSelect.appendChild(option);
                    });
                } else {
                    userSelect.innerHTML = '<option value="">Sonuç bulunamadı</option>';
                }
            }
        } catch (error) {
            console.error('Error loading users:', error);
            userSelect.innerHTML = '<option value="">Hata oluştu</option>';
        }
    }

    async function processQRCode(qrCode) {
        const eventId = eventSelect.value;

        if (!eventId) {
            showFeedback('error', '@Localizer["PleaseSelectEvent"]');
            return;
        }

        if (!qrCode) {
            return;
        }

        // Check cooldown period to prevent duplicate scans
        const currentTime = Date.now();
        if (currentTime - lastScanTime < SCAN_COOLDOWN) {
            if (usbMode.checked) {
                qrInput.value = '';
                qrInput.focus();
            }
            return;
        }

        isProcessing = true;
        lastScanTime = currentTime;
        
        if (usbMode.checked) {
            qrInput.disabled = true;
        }

        try {
            const response = await fetch('/Scanner/CheckIn', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    qrCode: qrCode,
                    eventId: eventId
                })
            });

            if (response.ok) {
                const result = await response.json();
                
                let statusText = '';
                if (result.status === 'AlreadyCheckedIn') {
                    statusText = '@Localizer["AlreadyCheckedIn"]';
                } else if (result.isNewCheckIn) {
                    statusText = '@Localizer["NewRegistration"]';
                } else {
                    statusText = '@Localizer["Updated"]';
                }

                showFeedback('success', `✓ ${result.userName} - ${statusText}`);
            } else {
                const errorText = await response.text();
                const errorMessage = parseErrorMessage(errorText);
                showFeedback('error', errorMessage);
            }
        } catch (error) {
            showFeedback('error', '@Localizer["NetworkError"]');
            console.error('Check-in error:', error);
        } finally {
            if (usbMode.checked) {
                qrInput.value = '';
                qrInput.disabled = false;
                qrInput.focus();
            }
            
            // Reset processing flag after a short delay
            setTimeout(() => {
                isProcessing = false;
            }, 500);
        }
    }

    function parseErrorMessage(errorText) {
        try {
            const errorObj = JSON.parse(errorText);
            return errorObj.error || errorText;
        } catch {
            return errorText || '@Localizer["CheckInFailed"]';
        }
    }

    function showFeedback(type, message) {
        const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
        const icon = type === 'success' ? 'check-circle-fill' : 'exclamation-triangle-fill';
        
        feedbackArea.innerHTML = `
            <div class="alert ${alertClass} alert-dismissible fade show" role="alert">
                <i class="bi bi-${icon} me-2"></i>
                <strong>${message}</strong>
                <button type="button" class="btn-close" data-bs-dismiss="alert" onclick="setTimeout(() => { if (usbMode.checked) qrInput.focus(); }, 100)"></button>
            </div>
        `;

        if (type === 'success') {
            setTimeout(() => {
                const alert = feedbackArea.querySelector('.alert');
                if (alert) {
                    alert.remove();
                }
            }, 3000);
        }
    }
</script>
}
